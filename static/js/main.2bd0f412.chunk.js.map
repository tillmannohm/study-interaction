{"version":3,"sources":["PreviewPane.js","Sliders/components.js","Sliders/BarChart.js","Sliders/RangeSlider.js","Sliders/Sliders.js","SliderPane.js","QueryFilter.js","FilterPane.js","InfoFields.js","InfoPane.js","ViewPane.js","MappingsPane.js","Export.js","Projection.js","Layout.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["Component","React","thumbHeight","withStyles","theme","rail","backgroundColor","palette","grey","width","height","position","pointerEvents","railHotspot","top","cursor","_ref","classes","getRailProps","_jsxs","Fragment","children","_jsx","className","root","secondary","main","marginLeft","marginTop","border","borderRadius","whiteSpace","zIndex","_ref2","domain","min","max","handle","id","value","percent","getHandleProps","role","style","left","concat","track","trackHotspot","_ref3","source","target","getTrackProps","MuiTickComponent","_ref4","tick","count","format","Typography","label","variant","defaultProps","d","textAlign","SimpleResultProcessing","MappingsPane","constructor","props","super","state","isInputFilled","isRadioSelected","buttonEnabled","this","handleSelectAlgorithm","bind","handleSelectDataset","e","v","console","log","selectAlgorithm","selectDataset","handleInput","setState","length","handleRadio","handleNext","algorithm_choice","algorithm_options","window","open","participantId","exportLabels","formData","FormData","append","Date","now","map","confidence","fetch","method","body","then","response","json","data","result","catch","error","render","selectedDataset","Grid","container","spacing","item","xs","type","placeholder","onChange","display","justifyContent","fontSize","transform","name","color","padding","textDecoration","margin","onClick","labelValue","document","getElementById","querySelector","disabled","option","index","memo","Projection","handleResize","camera","aspect","updateProjectionMatrix","renderer","setSize","current_scale","getScaleFromZ","z","d3_x","x","d3_y","y","resize_transform","d3","translate","scale","view","mount","d3_zoom","updateProjection","ar","filterAr","ranges","ar_sliced","i","settings","sprite_number","start","sprite_size","end","push","slice","c","points","scene","geometry","attributes","filteredActive","THREE","needsUpdate","updatePass2Shader","num","material","uniforms","greyTransparency","imageTransparency","updateClusterColors","clusterSelected","numVertices","metadata","clusters","Float32Array","clusterColors","clustersAr_sliced","cluster_unique","l","clusterId","indexOf","cluster_int","Math","random","cluster","clusterActive","loadTiles","tilesLoaded","init","pointsAr","addPoints","setupCamera","animate","getZFromScale","changeEmbeddings","sprite_side","tile_locations","Array","n","process","sprite_dir","datasetIMG","src","img","createElement","new_choice","embedding_chunks","range","mappings","echunk","array","tween","TWEEN","to","easing","Linear","None","onUpdate","zoomScaler","input","scaleMin","scaleMax","clamp","scaleProj","rvFOV","degToRad","fov","tan","camera_z_position","fov_height","zoomHandler","d3_transform","k","set","new_size","point_group","size","camera_z_start","embeddings_data","vFOV","min_x","_","max_x","ys","min_y","max_y","max_x_from_center","m","abs","max_y_from_center","far","scaleExtent","on","call","initial_scale","initial_transform","loader","textures","t","load","w","flipY","magFilter","vertices","embedding","vert","positionAr","offsetAr","clusterAr","addAttribute","texture_subsize","sprite_image_size","sprite_actual_size","floor","clusterList","clusterTypeSelected","includes","texture","repeat","vertex_shader","fragment_shader","vertexShader","fragmentShader","transparent","point_cloud","userData","sprite_index","add","addBlankHighlightPoints","hover_container","point","frustumCulled","visible","highlightPoint","digit_index","full_index","offsets","copyVector3sArray","offset","removeHighlights","highlight_container","highlights","remove","checkIntersects","mouse_position","previewPane_ctx","previewPane_image_size","mouse_vector","mouseX","mouseY","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersects","intersectObjects","sorted_intersects","sortIntersectsByDistanceToRay","intersect","object","undefined","setHoverIndex","handleMouse","domElement","node","clickOnImage","preserveDrawingBuffer","alpha","setClearColor","autoClear","appendChild","requestAnimationFrame","clear","parseInt","greyRenderTypeSelected","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","removeChild","tileProgress","allTiles","_Fragment","CircularProgress","overflow","ref","Layout","calculateProjection","newArr","update","A","B","arr","currentFilter","currentSearch","idx","currentProjection","refProjection","current","toggleControl","collapsedControl","toggleObject","collapsedObject","total","ww","wh","hover_index","previewPane_height","controlPane_height","filterPane_height","allFilter","fill","filterGrey","dimensions","setPreviewPaneCanvas","setPreviewImage","createRef","setDefaults","algorithm_name","addEventListener","setRenderer","handleChangeScale","val","handleChangeZoom","handleChangeCluster","handleChangeGrey","addToUrl","p","changeDataset","innerWidth","innerHeight","previewPane_mount","offsetHeight","imageSmoothingEnabled","canvas","ctx","getContext","url_prefix","filename","alt","verticalAlign","removeEventListener","url","link_URL","err","dataset_options","barData","main_style","background","general_style","lineHeight","displayNumb","right","maxHeight","controlMenu_mount","ProSidebar","collapsed","Menu","MenuItem","grem","font_size","datasetInfo","datasetDir","initPath","Data","dataset_dirs","defaultDataset","scaleEmbeddings","embeddings","queryString","location","search","urlParams","URLSearchParams","get","loadInit","loadConfig","path","loadSettings","loadBarData","loadMetadata","prepareMappings","ID","loadDataset","file","scaled_embeddings","paramName","navigate","toString","prepareDatasets","directory","choice","newDataset","default","foundInitDataset","floatColorConvertedArr","myColorFunction","rgb","withRouter","useParams","useNavigate","App","BrowserRouter","Routes","Route","exact","element","WithRouter","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bd0f412.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass PreviewPane extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dimensions: {},\n      imgURL: null,\n      previewImage: false,\n      timeoutId: null\n    };\n    // this.onImgLoad = this.onImgLoad.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.setPreviewPaneCanvas(this.side_canvas);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.hover_index !== prevProps.hover_index) {\n      this.setState({ previewImage: false });\n      clearTimeout(this.state.timeoutId);\n      const timeoutId = setTimeout(() => {\n        this.setState({ previewImage: true });\n      }, 100);\n      this.setState({ timeoutId });\n    }\n  }\n\n  render() {\n    let {\n      previewPane_image_size,\n    } = this.props;\n    // const {width, height} = this.state.dimensions;\n    // var imgWidth = \"auto\";\n    // var imgHeight = \"100%\";\n    // if (width >= height) {\n    //   imgWidth = \"100%\";\n    //   imgHeight = \"auto\"\n    // };\n\n    return (\n      <div>\n      <div style={{position: \"absolute\", width: previewPane_image_size, height: previewPane_image_size, textAlign: \"center\"}}>\n        <span style={{display: \"inline-block\", height: \"100%\", verticalAlign: \"middle\"}}/>\n\n      {this.state.previewImage === true ? this.props.setPreviewImage() : null}\n      \n      </div>\n        <canvas \n          ref={side_canvas => {\n            this.side_canvas = side_canvas\n          }}\n          width={previewPane_image_size}\n          height={previewPane_image_size}\n        />\n      </div>\n    )\n  }\n}\nexport default React.memo(PreviewPane)\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\n// Based on Material Design spec:\n// Styles by https://github.com/RafeSacks\n// https://material.io/design/components/sliders.html#spec\nconst trackHeight = 2;\nconst thumbHeight = 12;\n\n// *******************************************************\n// RAIL COMPONENT\n// *******************************************************\n\nconst muiRailStyle = theme => ({\n  rail: {\n    backgroundColor: theme.palette.grey[400],\n    width: \"100%\",\n    height: trackHeight,\n    position: \"absolute\",\n    pointerEvents: \"none\"\n  },\n  railHotspot: {\n    // backgroundColor: \"green\", // for debugging\n    width: \"100%\",\n    height: thumbHeight * 2, // Invisible hotspot same size as thumb\n    top: thumbHeight * -1,\n    position: \"absolute\",\n    cursor: \"pointer\"\n  }\n});\n\nfunction MuiRailComponent({ classes, getRailProps }) {\n  return (\n    <Fragment>\n      <div className={classes.railHotspot} {...getRailProps()} />\n      <div className={classes.rail} />\n    </Fragment>\n  );\n}\n\nMuiRailComponent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  getRailProps: PropTypes.func.isRequired\n};\n\nexport const MuiRail = withStyles(muiRailStyle)(MuiRailComponent);\n\n// *******************************************************\n// HANDLE COMPONENT\n// *******************************************************\n\nconst muiHandleStyle = theme => ({\n  root: {\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: thumbHeight * -0.5,\n    marginTop: thumbHeight * -0.5,\n    width: thumbHeight,\n    height: thumbHeight,\n    border: 0,\n    borderRadius: \"50%\", // circle\n    // boxShadow: \"1px 1px 1px 1px rgba(0, 0, 0, 0.2)\",\n    whiteSpace: \"nowrap\", // for child display inline-block to work\n    position: \"absolute\",\n    zIndex: 2,\n    cursor: \"pointer\"\n  }\n});\n\nfunction MuiHandleComponent({\n  domain: [min, max],\n  handle: { id, value, percent },\n  classes,\n  getHandleProps\n}) {\n  return (\n    <div\n      role=\"slider\"\n      aria-valuemin={min}\n      aria-valuemax={max}\n      aria-valuenow={value}\n      className={classes.root}\n      style={{ left: `${percent}%` }}\n      {...getHandleProps(id)}\n    />\n  );\n}\n\nMuiHandleComponent.propTypes = {\n  domain: PropTypes.array.isRequired,\n  handle: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    percent: PropTypes.number.isRequired\n  }).isRequired,\n  classes: PropTypes.object.isRequired,\n  getHandleProps: PropTypes.func.isRequired\n};\n\nexport const MuiHandle = withStyles(muiHandleStyle)(MuiHandleComponent);\n\n// *******************************************************\n// TRACK COMPONENT\n// *******************************************************\n\nconst muiTrackStyle = theme => ({\n  track: {\n    backgroundColor: theme.palette.secondary.main,\n    height: trackHeight,\n    position: \"absolute\",\n    zIndex: 1,\n    pointerEvents: \"none\"\n  },\n  trackHotspot: {\n    // backgroundColor: \"grey\", // for debugging\n    height: thumbHeight, // Invisible hotspot same size as thumb\n    top: thumbHeight * -0.5,\n    position: \"absolute\",\n    cursor: \"pointer\"\n  }\n});\n\nfunction MuiTrackComponent({ classes, source, target, getTrackProps }) {\n  const left = `${source.percent}%`;\n  const width = `${target.percent - source.percent}%`;\n\n  return (\n    <Fragment>\n      <div className={classes.track} style={{ left, width }} />\n      <div\n        className={classes.trackHotspot}\n        style={{ left, width }}\n        {...getTrackProps()}\n      />\n    </Fragment>\n  );\n}\n\nMuiTrackComponent.propTypes = {\n  source: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    percent: PropTypes.number.isRequired\n  }).isRequired,\n  target: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    percent: PropTypes.number.isRequired\n  }).isRequired,\n  classes: PropTypes.object.isRequired,\n  getTrackProps: PropTypes.func.isRequired\n};\n\nexport const MuiTrack = withStyles(muiTrackStyle)(MuiTrackComponent);\n\n// *******************************************************\n// TICK COMPONENT\n// *******************************************************\n\nconst muiTickStyle = theme => ({\n  tick: {\n    position: \"absolute\",\n    marginTop: 14,\n    width: 1,\n    height: 5,\n    backgroundColor: theme.palette.grey[400]\n  },\n  label: {\n    position: \"absolute\",\n    marginTop: 22,\n    textAlign: \"center\"\n  }\n});\n\nexport function MuiTickComponent({ classes, tick, count, format }) {\n  return (\n    <div>\n      <div className={classes.tick} style={{ left: `${tick.percent}%` }} />\n      <Typography\n        className={classes.label}\n        variant=\"caption\"\n        style={{\n          marginLeft: `${-(100 / count) / 2}%`,\n          width: `${100 / count}%`,\n          left: `${tick.percent}%`\n        }}\n      >\n        {format(tick.value)}\n      </Typography>\n    </div>\n  );\n}\n\nMuiTickComponent.propTypes = {\n  tick: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    percent: PropTypes.number.isRequired\n  }).isRequired,\n  classes: PropTypes.object.isRequired,\n  count: PropTypes.number.isRequired,\n  format: PropTypes.func.isRequired\n};\n\nMuiTickComponent.defaultProps = {\n  format: d => d\n};\n\nexport const MuiTick = withStyles(muiTickStyle)(MuiTickComponent);\n","import React from \"react\";\nimport { Bar, defaults } from \"react-chartjs-2\";\n\nclass BarChart extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      // bgColor: this.props.color,\n      isHovering: false,\n      barSelected: null,\n    }\n    this.onLeave = this.onLeave.bind(this)\n    // this.showHideUpdate = this.showHideUpdate.bind(this);\n  }\n  \n\n  calculateHistogram(domain,normalize){\n    // Calculate frequency of data (adapted for float numbers)\n    let data = []\n    for(let i=0;i<this.props.settings[\"total\"];i++){\n      if(this.props.currentProjection[i]===0){\n        data.push(this.props.metadata[i][this.props.sliderID])\n      }\n    }\n    var buckets = {};\n    this.bucketsFinder = {};\n    const bucketCount = 50;\n    var stepSize;\n    if(domain[0] < 0){stepSize = (Math.abs(domain[0]) + Math.abs(domain[1])) / bucketCount}\n    else{stepSize = Math.abs((Math.abs(domain[0]) - Math.abs(domain[1])) / bucketCount)}\n    // Console.log(\"stepSize\", stepSize);\n    for (let i = 0; i < bucketCount; i++) {\n      buckets[i] = 0;\n    }\n    var targetBucket;\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] === domain[1]){targetBucket = bucketCount-1}\n        else {\n          // console.log(data[i])\n          targetBucket = ((data[i] - domain[0]) / stepSize) | 0\n        }\n        buckets[targetBucket] +=1;\n        // if (typeNumber === \"int\")\n        // this.bucketsFinder[parseInt(data[i])] = targetBucket;\n        // else\n        this.bucketsFinder[parseFloat(data[i]).toFixed(1)] = targetBucket;\n      }\n    var bucketList = Object.values(buckets)\n    if (normalize === true){\n      // Normalize data\n      var ratio = Math.max.apply(Math, bucketList) / 50;\n        for (i = 0; i < bucketList.length; i++) {\n          bucketList[i] = Math.round(bucketList[i] / ratio);\n        }\n      }\n    const barDataValues = [];\n    for (let i = 0; i < bucketList.length; i++) {\n      barDataValues.push(bucketList[i] || 0);\n    }\n    // console.log(barDataValues)\n    return barDataValues;\n  }\n\n\n  hoverEffect(chartElement) {\n    this.setState({isHovering: true});\n    if (chartElement[0]) {\n      var barID = chartElement[0].index;\n      var arr = new Float32Array( this.props.settings[\"total\"] ).fill(1);\n      // var arr = !this.props.filterImageAr;\n      var prevArr = this.props.currentProjection;\n      // console.log(this.props.barData[\"selections\"][barID]);?\n      this.props.barData[\"selections\"][barID].forEach(element => {\n        // if (prevArr[element] === 1) {\n          arr[element] = prevArr[element]\n        // }\n        // console.log(this.props.barData[\"selections\"][barID])\n      });\n      this.props.calculateProjection(arr, null, false);\n      this.setState({barSelected: barID});\n    }\n  }\n\n  onLeave() { \n    // this.setState(() => ({isHovering: false}), () => console.log(this.state));\n    this.setState({isHovering: false});\n    this.props.calculateProjection(this.props.currentProjection, null, false)\n  }\n\n  // componentDidUpdate(prevProps) {\n  //   if (this.props.currentProjection !== prevProps.currentProjection) {\n  //     this.barDataIst = this.calculateFrequencyOfData(this.props.domain,this.props.datafilter,false);\n  //   }\n  // }\n\n\n  render() {\n    const { barData, domain, color, selected } = this.props;\n    defaults.animation = false;\n    var markerData = Array(50).fill(0);\n    this.barDataSoll = barData.histogram;\n    this.barDataIst = this.calculateHistogram(domain,false);\n    const barDataCalc = {\n      labels: this.barDataSoll.map((val, i) => i),\n      datasets: [\n        {\n          label: \"barDataIst\",\n          type: 'bar',\n          barThickness: 5,\n          normalized: true,\n          order: 2,\n          backgroundColor: this.state.isHovering ? \"rgb(64, 64, 64)\" : markerData.map((val, i) =>\n            i === this.bucketsFinder[parseFloat(selected).toFixed(1)]\n              ? \"#f50057\"\n              : color\n            ),\n          hoverBackgroundColor: color,\n          // backgroundColor: this.state.bgColor,\n\n          // backgroundColor: this.barDataIst.map((val, i) =>\n          // i === this.bucketsFinder[parseFloat(selected).toFixed(1)]\n          //   ? \"rgb(245, 0, 87)\"\n          //   : this.state.isHovering ? \"rgb(64, 64, 64)\" : color\n          // ),\n          data: this.barDataIst\n          },\n\n          {\n            label: \"barDataSoll\",\n            type: 'bar',\n            barThickness: 5,\n            normalized: true,\n            order: 3,\n            backgroundColor: markerData.map((val, i) =>\n            i === this.bucketsFinder[parseFloat(selected).toFixed(1)]\n              ? \"#542032\"\n              : \"rgb(64, 64, 64)\"\n            ),\n            hoverBackgroundColor: \"rgb(64, 64, 64)\",\n\n          //   backgroundColor: this.barDataIst.map((val, i) =>\n          //   i === this.bucketsFinder[parseFloat(selected).toFixed(1)]\n          //     ? \"rgb(255, 153, 189)\"\n          //     : \"rgb(64, 64, 64)\"\n          // ),\n            // hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n            data: this.barDataSoll\n          }\n      ]\n    };\n\n    // console.log(\"selected\",this.bucketsFinder[parseFloat(selected).toFixed(1)] );\n    const options = {\n      responsive: true,\n      // pointStyle: 'triangle',\n      interaction: {\n        mode: 'index',\n        intersect: false\n        },\n      events: ['mouseleave', \"mousemove\", \"mouseout\", \"click\"], //, 'touchstart', 'touchmove'],\n      hoverBackgroundColor: color,\n      onClick: () => {\n            this.setState({isHovering: !this.state.isHovering});\n            this.props.calculateProjection(this.props.currentProjection, null, false)\n      },\n      onHover: (event, chartElement) => {\n        if (event.type === \"mousemove\" && this.state.isHovering && this.state.barSelected !== chartElement[0].index) {\n          this.setState({bgColor: \"rgb(64, 64, 64)\"});\n          this.hoverEffect(chartElement)\n          if (event.native.target.style.cursor !== 'ew-resize') {\n            event.native.target.style.cursor = 'ew-resize';\n          }\n        } else if (!this.state.isHovering && event.native.target.style.cursor !== 'pointer') {\n            event.native.target.style.cursor = 'pointer';\n          }\n      // if (this.state.isHovering){\n      //   ReactTooltip.hide(this.fooRef)\n      // }\n      },\n      plugins: {\n        legend: {\n          display: false\n        },\n        tooltip: {\n          enabled: false\n        }\n      },\n      scales: {\n        x: {\n          display: false,\n          stacked: true,\n          // position: 'bottom'\n        },\n        yAxes: {\n          beginAtZero: true,\n          display: false,\n          // stacked: true,\n          // ticks: {\n          //   min: 100\n          // }\n        }\n      }\n    };\n\n\n    return (\n      <Bar data={barDataCalc} height={62} options={options} onMouseLeave={this.onLeave} />\n      );\n  }\n}\n\nexport default React.memo(BarChart);\n","import React from \"react\";\nimport { Grid, TextField, Tooltip } from \"@material-ui/core\";\nimport { Slider, Rail, Handles, Tracks } from \"react-compound-slider\";\nimport { MuiRail, MuiHandle, MuiTrack } from \"./components\";\nimport BarChart from \"./BarChart\";\n\nclass RangeSlider extends React.Component {\n  state = {\n    domain: this.props.range,\n    update: this.props.range,\n    values: this.props.range,\n    inputValues: this.props.range,\n    typeNumber: this.props.typeNumber,\n    step: this.props.step,\n    color: this.props.color,\n    hover_index: this.props.hover_index,\n    isToggleOn: false,\n  };\n\n  handleClick = (e) => {\n    this.setState((prevState) => ({ isToggleOn: !prevState.isToggleOn }));\n    e.stopPropagation();\n  };\n\n  changeSlider = (values) => {\n    this.props.onChangeSlider(this.props.id, values);\n  };\n\n  render() {\n    const { domain, values, update, inputValues, color, typeNumber } = this.state;\n\n    return (\n      <Grid container>\n        <Grid item xs={12}>\n          <div style={{ height: \"90px\", width: \"270px\", marginTop: \"22px\" }}>\n            <BarChart\n              update={update}\n              domain={domain}\n              color={color}\n              barData={this.props.barData}\n              calculateProjection={this.props.calculateProjection}\n              settings={this.props.settings}\n              currentProjection={this.props.currentProjection}\n              sliderID={this.props.sliderID}\n              metadata={this.props.metadata}\n              selected={this.props.metadata[this.props.hover_index][this.props.sliderID]}\n            />\n\n            <Slider\n              mode={3}\n              step={typeNumber === \"int\" ? 1 : 0.01}\n              domain={domain}\n              color={color}\n              rootStyle={{\n                position: \"relative\",\n                width: \"100%\",\n              }}\n              onUpdate={(update) => {\n                this.setState({ update, inputValues: update });\n              }}\n              onChange={(values) => {\n                this.setState({ values });\n                this.changeSlider(update);\n              }}\n              values={values}\n            >\n              <Rail>\n                {({ getRailProps }) => <MuiRail getRailProps={getRailProps} />}\n              </Rail>\n              <Handles>\n                {({ handles, getHandleProps }) => (\n                  <div className=\"slider-handles\">\n                    {handles.map((handle) => (\n                      <MuiHandle\n                        key={handle.id}\n                        handle={handle}\n                        domain={domain}\n                        getHandleProps={getHandleProps}\n                      />\n                    ))}\n                  </div>\n                )}\n              </Handles>\n              <Tracks left={false} right={false}>\n                {({ tracks, getTrackProps }) => (\n                  <div className=\"slider-tracks\">\n                    {tracks.map(({ id, source, target }) => (\n                      <MuiTrack\n                        key={id}\n                        source={source}\n                        target={target}\n                        getTrackProps={getTrackProps}\n                      />\n                    ))}\n                  </div>\n                )}\n              </Tracks>\n            </Slider>\n            <Grid\n              container\n              alignItems=\"center\"\n              justifyContent=\"space-around\"\n              // style={{ marginTop: \"15px\" }}\n            >\n              <Grid\n                item\n                xs={3}\n                style={{\n                textAlign: \"right\",\n                border: \"solid 1px white\",\n                height:\"20px\",\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                // marginTop: '-12px',\n                }}\n              >\n                <TextField\n                  fullWidth\n                  variant=\"outlined\"\n                  label=\"\"\n                  size=\"small\"\n                  width=\"8px\"\n                  value={inputValues[0]}\n                  margin=\"none\"\n                  inputProps={{\n                    style: {\n                      color:\"white\",\n                      padding: 0,\n                      marginLeft: 2\n                    }\n                  }}\n                  onChange={(evt) => {\n                    const value = evt.target.value;\n                    const newState = [value, inputValues[1]];\n                    this.setState({ inputValues: newState });\n                    if (value && value >= domain[0]) {\n                      this.setState({ values: newState });\n                    }\n                  }}\n                />\n              </Grid>\n              <Grid item xs={4} style={{ textAlign: \"center\",  marginTop: '-6px',}}>\n\n              <Tooltip title={<h3>{this.props.info}</h3>}>\n              <h3 style={{cursor: \"help\"}}>{this.props.title}</h3>\n              </Tooltip>\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                textAlign: \"right\",\n                border: \"solid 1px white\",\n                height:\"20px\",\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                // marginTop: '-12px',\n                }}\n              >\n                <TextField\n                  fullWidth\n                  variant=\"outlined\"\n                  label=\"\"\n                  size=\"small\"\n                  value={inputValues[1]}\n                  margin=\"none\"\n                  inputProps={{\n                    style: {\n                      color:\"white\",\n                      padding: 0,\n                      marginLeft: 2\n                    }\n                  }}\n                  // style={{ paddingTop: \"2px\", paddingBottom: \"8px\",color: \"white\" }}\n                  onChange={(evt) => {\n                    const value = evt.target.value;\n                    const newState = [inputValues[0], value];\n                    this.setState({ inputValues: newState });\n                    if (value && value <= domain[1] && value >= values[0]) {\n                      this.setState({ values: newState });\n                    }\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default React.memo(RangeSlider);\n","import React, { Component } from 'react';\nimport { Grid } from \"@material-ui/core\";\nimport RangeSlider from \"./RangeSlider\";\n//import uuid from 'react-uuid';\n\nclass Sliders extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeSlider = this.changeSlider.bind(this);\n    // create references for each slider\n    this.slidersAr = []\n    for (let element in this.props.settings.sliders) {\n      this.slidersAr.push( this.props.settings.sliders[element].id );\n    }\n    this.refSliders = {}\n    this.filterData = {}\n    this.filtered = {}\n\n    for(let i=0;i<this.slidersAr.length;i+=1){\n      this.refSliders[this.slidersAr[i]] = React.createRef();\n      // Initial values non filter\n      let filterVals = []\n      for (let element in this.props.metadata) {\n        filterVals.push( this.props.metadata[element][this.slidersAr[i]] );\n      }\n      this.filterData[this.slidersAr[i]] = filterVals\n    }\n    this.state = {\n      datafilter: this.filterData\n    }\n\n  }\n\n  changeSlider(componentName, values) {\n    // console.log(componentName, values);\n    let {\n      metadata,\n    } = this.props\n    this.filtered[componentName] = new Float32Array( this.props.settings[\"total\"]).fill(0)\n    let filteredArr = new Float32Array( this.props.settings[\"total\"])\n\n    for(let element in metadata){\n      if(values[0] > metadata[element][componentName] ||\n          values[1] < metadata[element][componentName]\n          ){\n            this.filtered[componentName][element] = 1\n      }\n    }\n    let list = Object.values(this.filtered)\n    let arr = filteredArr.map((x, idx) => list.reduce((max, curr) => max + curr[idx], 0));\n    this.props.calculateProjection(arr, \"filter\", true)\n  }\n\n\n  render() {\n    let {\n      hover_index,\n      settings,\n      barData,\n    } = this.props;\n\n    const slidersSettings = settings['sliders'];\n    const SliderList = slidersSettings.map((slider) =>\n    <Grid item>\n      <RangeSlider\n        ref={this.refSliders[slider['id']]}\n        datafilter={this.state.datafilter[slider['id']]}\n        title={slider['title']}\n        id={slider['id']}\n        info={slider['info']}\n        typeNumber={slider['typeNumber']}\n        color={slider['color']}\n        onChangeSlider={this.changeSlider}\n        hover_index={hover_index}\n        barData={barData[slider['id']]}\n        calculateProjection={this.props.calculateProjection}\n        currentProjection={this.props.currentProjection}\n        settings={settings}\n        sliderID={slider['id']}\n        metadata={this.props.metadata}\n        range={[slider['min'],slider['max']]}\n        />\n      </Grid>\n    )\n\n    return (\n      <Grid container style={{ marginLeft: \"6px\"}}>\n        <Grid item >\n        {SliderList}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default Sliders\n","import React, { Component } from 'react'\nimport Sliders from \"./Sliders/Sliders\";\n\nclass SliderPane extends Component {\n  constructor(props) {\n    super(props);\n    this.sliderReset = this.sliderReset.bind(this);\n  }\n\n  sliderReset() {\n    console.log(\"reset range sliders\");\n  }\n\n  render() {\n    let {\n      metadata,\n      hover_index,\n    } = this.props;\n\n    return (\n      <Sliders\n        metadata={metadata}\n        settings={this.props.settings}\n        hover_index={hover_index}\n        barData={this.props.barData}\n        filterImageAr={this.props.filterImageAr}\n        calculateProjection={this.props.calculateProjection}\n        currentProjection={this.props.currentProjection}\n      />\n    )\n  }\n}\n\nexport default React.memo(SliderPane)","import React, { Component } from 'react'\nimport  _ from \"lodash\";\nimport { Button, ButtonGroup } from \"@material-ui/core\";\nimport ReactFilterBox, {SimpleResultProcessing, GridDataAutoCompleteHandler} from \"react-filter-box\";\nimport \"./filter-box.css\";\n\n//Extend this class to add your custom operator\n// class CustomAutoComplete extends GridDataAutoCompleteHandler {\n//     // Override this method to add new your operator\n//     needOperators(parsedCategory) {\n//         var result = super.needOperators(parsedCategory);\n//         return result.concat([\"startsWith\"]);\n//     }\n// }\n\nclass CustomResultProcessing extends SimpleResultProcessing {\n    // Override this method to add your handler for startsWith operator\n    filter(row, fieldOrLabel, operator, value){\n        var field = this.tryToGetFieldCategory(fieldOrLabel);\n        switch(operator){\n            case \"==\": return row[field] === value;\n            case \"!=\": return row[field] !== value;\n            case \"contains\": return row[field] && row[field].toLowerCase().indexOf(value.toLowerCase()) >=0;\n            case \"!contains\": return row[field] && row[field].toLowerCase().indexOf(value.toLowerCase()) <0;\n            default: return false;\n        }\n    }\n    }\n\nclass Filterbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            parseOK: true,\n            query2: {}\n        };\n        this.applyFilter = this.applyFilter.bind(this);\n        this.resetFilter = this.resetFilter.bind(this);\n        this.options = this.props.settings.search;\n        // this.customAutoComplete = new CustomAutoComplete(this.props.metadata,this.options);\n        // this.editorConfig = {\n        //     direction: \"rtl\"\n        // };\n    }\n\n    applyFilter() {\n        var newData = new CustomResultProcessing(this.options).process(this.props.metadata, this.state.query2);\n        var arr = new Float32Array(this.props.settings[\"total\"]).fill(1);\n        newData.forEach(element => {\n            arr[element[\"index\"]] = 0;\n        });     \n        this.props.calculateProjection(arr, \"search\", true);\n    }\n\n    resetFilter() {\n        this.setState({ query: null, query2: '' });\n        var arr = new Float32Array(this.props.settings[\"total\"]).fill(0);\n        this.props.calculateProjection(arr, \"search\", true);\n    }\n\n    //customer your rendering item in auto complete\n    customRenderCompletionItem(self, data, pick) {\n        var className = `hint-value cm-${data.type}`\n        return <div className={className} >\n                    <span style={{ fontWeight: \"bold\" }}>{data.value}</span>\n                    <span style={{color:\"gray\", fontSize:10}}> [{data.type}] </span>\n                </div>\n    }\n\n    onParseOk(expressions) {\n        this.setState({ parseOK: false });\n        this.setState({ query2: expressions });\n        // this.applyFilter(expressions);\n    }\n\n    onParseError(expressions) {\n        this.setState({ parseOK: true });\n    }\n    \n    exportMetadata = () => {\n        var filteredMetadata = [];\n        for (let i = 0; i < this.props.metadata.length; i++) {\n          if (this.props.currentProjection[i] === 0) {\n            var obj = this.props.metadata[i];\n            filteredMetadata.push(obj);\n          }\n        }\n        this.setState(\n          { filterDataToExportCSV: filteredMetadata },\n          () => {\n            document.getElementsByClassName('hidden')[0].click();\n          }\n        );\n      };\n      \n\n    render() {\n        return (\n        <div className=\"main-container\">\n            <ReactFilterBox\n                // autoCompleteHandler = {this.customAutoComplete}\n                customRenderCompletionItem = {this.customRenderCompletionItem.bind(this) }\n                query={this.state.query}\n                data={this.props.metadata}\n                options={this.options}\n                onParseOk={this.onParseOk.bind(this) }\n                onParseError={this.onParseError.bind(this) }\n                editorConfig={{ lineWrapping: true }}\n            />\n\n            <ButtonGroup variant=\"contained\">\n            <Button onClick={this.applyFilter}>apply</Button>\n            <Button onClick={this.resetFilter}>reset</Button>\n            </ButtonGroup>\n\n        </div>\n        )\n    }\n}\n\nexport default Filterbox","import React, { Component } from 'react'\nimport { Grid } from \"@material-ui/core\";\n//import _ from \"lodash\";\nimport Filterbox from \"./QueryFilter\";\n\nclass FilterPane extends Component {\n\n  render() {\n    let {\n      metadata,\n      settings,\n    } = this.props\n\n    return (\n      <Grid container spacing={2}>\n        <Filterbox \n          calculateProjection={this.props.calculateProjection}\n          settings={settings}\n          metadata={metadata}\n          currentProjection={this.props.currentProjection}\n          allFilter={this.props.allFilter}\n        />\n      </Grid>\n    )\n  }\n}\n\nexport default React.memo(FilterPane)","import React, { Component, Fragment } from 'react'\nimport { Grid } from \"@material-ui/core\";\nimport uuid from 'react-uuid';\n\nclass InfoFields extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        let {\n            metadata,\n            hover_index,\n            infos,\n        } = this.props;\n\n        const linkStyle = {\n            color: 'CornflowerBlue'\n        };\n        \n\n        const InfoList = infos.map((info) => \n            <Fragment>\n                {/* <Grid key={uuid()} item xs={4}>\n                    {info}:\n                </Grid> */}\n                <Grid key={uuid()} item xs={12}>   \n                    {( typeof  metadata[hover_index][info] === 'string' && metadata[hover_index][info].length>4 && metadata[hover_index][info].substring(0, 4)==='http')  ? <a href={metadata[hover_index][info]} target=\"_blank\" rel=\"noreferrer\" style={linkStyle}>{metadata[hover_index][info].substring(8,30)}...</a>: metadata[hover_index][info]}\n                </Grid>\n            </Fragment>\n        )\n\n        return (\n            <Grid key={uuid()} container justifyContent=\"space-between\" spacing={1} wrap=\"wrap\">    \n                {/* <Grid key={uuid()} item xs={12}>   \n                    <b>{metadata[hover_index].Title}</b>\n                </Grid> */}\n                {InfoList}\n\n            </Grid>\n        );\n    }\n}\n\nexport default InfoFields","import React, { Component } from 'react'\nimport InfoFields from \"./InfoFields\";\n\nclass InfoPane extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      dimensions: {},\n    };\n  }\n\n  render() {\n    let {\n      hover_index,\n      infos,\n      metadata,\n    } = this.props;\n\n    return (\n      <InfoFields\n      metadata={metadata}\n      hover_index={hover_index}\n      infos={infos}\n      />\n    )\n\n  }\n}\n\nexport default React.memo(InfoPane)\n","import React, { Component } from 'react'\nimport { Grid, Slider, Box } from \"@material-ui/core\";\n\nclass ViewPane extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      dimensions: {},\n      checked: this.props.filterGrey\n    }\n  }\n\n  handleChange = () => {\n    this.setState(prevState => ({\n      checked: !prevState.checked\n    }));\n    this.props.handleChangeGrey(this.state.checked ? 1 : 0);\n  }\n\n  render() {\n    let {\n      clusters\n    } = this.props\n\n    return (\n      <Grid container spacing={1}>\n        \n          \n          <Grid item xs={4}>\n            clusters:\n          </Grid>\n          <Grid item xs={8}>\n            <select onChange={this.props.handleChangeCluster}>\n              <option key=\"0\" value=\"disabled\">-</option>\n              {clusters['clusterList'].map((option, index) => (\n              <option key={option} value={option}>\n                  {option.toLowerCase()}\n              </option>\n              ))}\n            </select> \n          </Grid>\n          <Grid item xs={4}>\n            size (out):\n          </Grid>\n          <Grid item xs={8}>\n          <Box height={10}>\n          <Slider\n            size=\"small\"\n            defaultValue={this.props.scaleMin}\n            min={3}\n            max={60}\n            onChange={this.props.handleChangeScale}\n          />\n          </Box>\n          </Grid>\n          <Grid item xs={4}>\n          size (in):\n          </Grid>\n          <Grid item xs={8}>\n          <Box height={10}>\n          <Slider\n            size=\"small\"\n            defaultValue={this.props.scaleMax}\n            min={3}\n            max={120}\n            onChange={this.props.handleChangeZoom}\n          />\n          </Box>\n          </Grid>\n\n          <Grid item xs={11}>\n          show filtered-out items (slower):\n          </Grid>\n          <Grid item xs={1}>\n            <input type=\"checkbox\" \n            checked={this.state.checked} \n            onChange={this.handleChange}\n            />\n          </Grid>\n\n      </Grid>\n    )\n  }\n}\n\nexport default React.memo(ViewPane)\n","import React, { Component } from 'react'\nimport { Grid } from \"@material-ui/core\";\n\nconst scriptUrl = 'https://script.google.com/macros/s/AKfycbzihNMsNv0ENe24M9mitXiZurl2DOHXK1RMR5AX0v0lC9RP5WXhyLTNnxg7J6sTALNZ6A/exec'\n\n\nclass MappingsPane extends Component {\n  constructor(props) {\n    super(props)\n    this.handleSelectAlgorithm = this.handleSelectAlgorithm.bind(this);\n    this.handleSelectDataset = this.handleSelectDataset.bind(this);\n  }\n\n  state = {\n    isInputFilled: false,\n    isRadioSelected: false,\n    buttonEnabled: false\n  }\n\n  handleSelectAlgorithm(e) {\n    let v = e.target.value;\n    console.log(\"algorithm\",v);\n    this.props.selectAlgorithm(v);\n  }\n\n  handleSelectDataset(e) {\n    let v = e.target.value;\n    this.props.selectDataset(v);\n  }\n\n  handleInput(e) {\n    let v = e.target.value;\n    this.setState({ isInputFilled: v.length > 2 });\n    if (this.state.isInputFilled && this.state.isRadioSelected) {\n      this.setState({ buttonEnabled: true });\n    } else {\n      this.setState({ buttonEnabled: false });\n    }\n  }\n\n  handleRadio(e) {\n    this.setState({ isRadioSelected: true });\n    if (this.state.isInputFilled) {\n      this.setState({ buttonEnabled: true });\n    } else {\n      this.setState({ buttonEnabled: false });\n    }\n  }\n\n  handleNext() {\n    if (this.props.algorithm_choice + 1 < this.props.algorithm_options.length) {\n      this.handleSelectAlgorithm({ target: { value: this.props.algorithm_options[this.props.algorithm_choice + 1] } });\n    } else {\n      window.open(`https://tillmannohm.github.io/study-annotation/?id=${this.props.participantId}`, '_self');\n  }\n  }\n\n  exportLabels(e) {\n    // setIsModalOpen(true); // Open the modal\n    // render();\n    const formData = new FormData();\n    formData.append('sheetName', 'labels');\n    formData.append('userID', this.props.participantId);\n    formData.append('timestamp', Date.now());\n    formData.append('mapID', e.target.map);\n    formData.append('label', e.target.value);\n    formData.append('confidence', e.target.confidence);\n\n    fetch(scriptUrl, {\n      method: 'POST', \n      body: formData,\n    })\n    .then(response => response.json())\n    .then(data => {\n      // nextAnnotation();\n      if (data.result === 'success') {\n        console.log('Data submitted successfully');\n        \n      } else {\n        console.log('Failed to submit data');\n        // // download the data as a JSON file\n        // const file = new Blob([JSON.stringify(historyCopy)], { type: \"application/json\" });\n        // const link = document.createElement('a');\n        // link.href = URL.createObjectURL(file);\n        // link.download = `canvas_export_${Date.now()}_${Math.floor(Math.random() * 3)}.json`;\n        // link.click();\n        // URL.revokeObjectURL(link.href);\n        // // alert the user about the issue and the downloaded file\n        // alert(\"There was an issue with the server. A download of your map was provided. Please send this file to the authors via email.\");\n      }\n    })\n    .catch(error => console.error('Error:', error));\n    // setIsModalOpen(false); // Close the modal\n  };\n\n\n\n\n  render() {\n    let {\n      algorithm_options,\n      algorithm_choice,\n      selectedDataset,\n    } = this.props;\n\n\n    return (\n      \n      <Grid container spacing={1}>\n          <Grid item xs={12}>\n          <h1>Map {algorithm_options[algorithm_choice]}</h1>\n          </Grid>\n          <Grid item xs={12}>\n          <p>Give a meaningful label to describe the underlying similarity concept of this map:</p>\n          </Grid>\n          <Grid item xs={12}>\n          <input \n            type=\"text\"\n            className=\"full-width\"\n            id=\"labelInput\"\n            placeholder=\"Enter a descriptive label\"\n            onChange={(e) => {\n              this.handleInput({ target: { value: e.target.value } })\n            }}\n          />\n          </Grid>\n          {/* <Grid item xs={12}></Grid>\n          <Grid item xs={12}></Grid> */}\n          <Grid item xs={12}>\n          <p>I am confident about my answer and found the underlying similarity concept easy to describe.</p>\n          </Grid>\n          <Grid item xs={12}>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <div style={{ width: '20%' }}>\n              <p style={{fontSize: 'small', transform: 'rotate(-45deg)'}}>Strongly<br/>Disagree</p>\n              <input type=\"radio\" id=\"1\" name=\"confidence\" value=\"1\" onChange={(e) => {this.handleRadio(e)}} />\n            </div>\n            <div style={{ width: '20%' }}>\n            <p style={{fontSize: 'small', transform: 'rotate(-45deg)'}}>&nbsp;<br/>Disagree</p>\n              <input type=\"radio\" id=\"2\" name=\"confidence\" value=\"2\" onChange={(e) => {this.handleRadio(e)}} />\n            </div>\n            <div style={{ width: '20%' }}>\n            <p style={{fontSize: 'small', transform: 'rotate(-45deg)'}}>&nbsp;<br/>Neutral</p>\n              <input type=\"radio\" id=\"3\" name=\"confidence\" value=\"3\" onChange={(e) => {this.handleRadio(e)}} />\n            </div>\n            <div style={{ width: '20%' }}>\n            <p style={{fontSize: 'small', transform: 'rotate(-45deg)'}}>&nbsp;<br/>Agree</p>\n              <input type=\"radio\" id=\"4\" name=\"confidence\" value=\"4\" onChange={(e) => {this.handleRadio(e)}} />\n            </div>\n            <div style={{ width: '20%' }}>\n            <p style={{fontSize: 'small', transform: 'rotate(-45deg)'}}>Strongly<br/>Agree</p>\n              <input type=\"radio\" id=\"5\" name=\"confidence\" value=\"5\" onChange={(e) => {this.handleRadio(e)}} />\n            </div>\n          </div>\n          </Grid>\n          <Grid item xs={12}>\n            <p></p>\n          </Grid>\n          \n          <Grid item xs={12}>\n            <button \n              style={{\n                width: '100%',\n                height: '60px',\n                fontSize: '20px',\n                backgroundColor: this.state.buttonEnabled ? '#4CAF50' : '#808080',\n                border: 'none',\n                color: this.state.buttonEnabled ? 'white' : 'darkgray',\n                padding: '15px 32px',\n                textAlign: 'center',\n                textDecoration: 'none',\n                display: 'inline-block',\n                margin: '4px 2px',\n                cursor: this.state.buttonEnabled ? 'pointer' : 'not-allowed',\n                borderRadius: '12px'\n              }}\n              onClick={() => {\n                const labelValue = document.getElementById('labelInput').value;\n                if(labelValue !== '') {\n                  this.exportLabels({ target: { value: labelValue, map: algorithm_options[algorithm_choice], confidence: document.querySelector('input[name=\"confidence\"]:checked').value } });\n                  this.handleNext();\n                }\n              }}\n              disabled={!this.state.buttonEnabled}\n            >\n              Next\n            </button>\n          </Grid>\n          <Grid item xs={8}>\n            <select className=\"full-width\"\n              onChange={this.handleSelectAlgorithm}\n              value={algorithm_options[algorithm_choice]}\n            >\n              {algorithm_options.map((option, index) => (\n              <option key={option} value={option}>\n                  {option}\n              </option>\n              ))}\n            </select>\n          </Grid>\n        </Grid>\n    )\n  }\n}\n\nexport default React.memo(MappingsPane)","\nimport React, { Component } from 'react'\nimport { Button } from \"@material-ui/core\";\nimport { CSVLink } from \"react-csv\";\nimport canvasToImage from 'canvas-to-image';\n\n\nclass Export extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        filterDataToExportCSV:[],\n    }\n    }\n\n    makePNG = async () => {\n        console.log('download projection area as png')\n        canvasToImage(document.getElementById(\"threeCanvas\"));\n      }\n\n  \n\nrender() {\n    let {\n        metadata,\n        currentProjection\n      } = this.props;\n\n    return (\n        <><div style={{ marginBottom: \"12px\" }}>\n        <CSVLink \n            data={this.state.filterDataToExportCSV} \n            filename={\"CSN_filtered_metadata.csv\"} \n            target=\"_blank\"\n            onClick={() => {\n            let filteredMetadata = [];\n            for (let i=0;i<metadata.length;i++) {\n                if(currentProjection[i]===0){\n                var obj = metadata[i];\n                filteredMetadata.push(obj)\n                }\n            }\n            this.setState({filterDataToExportCSV: filteredMetadata});\n            }}                \n            >\n            <Button variant=\"contained\" fullWidth >Download metadata CSV</Button>\n            </CSVLink>\n            </div><div>\n                <Button variant=\"contained\" fullWidth onClick={this.makePNG}>Download projection PNG</Button>\n            </div></>\n\n    )\n\n\n}\n  \n    // // Release memory of export filter metadata\n    // if(this.state.filterDataToExportCSV.length>0) this.setState({filterDataToExportCSV: []});\n\n\n}\n\nexport default React.memo(Export)\n\n","import React, { Component } from 'react'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as TWEEN from '@tweenjs/tween.js'\nimport { CircularProgress } from \"@material-ui/core\";\n\nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.loadTiles()\n    this.state = {\n      tilesLoaded: 0,\n      view: null\n    }\n    this.init = this.init.bind(this)\n    this.pointsAr = []\n    this.addPoints = this.addPoints.bind(this)\n    this.handleResize = this.handleResize.bind(this)\n    this.setupCamera = this.setupCamera.bind(this)\n    this.animate = this.animate.bind(this)\n    this.getScaleFromZ = this.getScaleFromZ.bind(this)\n    this.getZFromScale = this.getZFromScale.bind(this)\n    this.changeEmbeddings = this.changeEmbeddings.bind(this)\n  }\n\n  loadTiles(){ \n    this.sprite_size = this.props.settings.sprite_side * this.props.settings.sprite_side\n    this.tile_locations = [...Array(this.props.settings.sprite_number)].map(\n      (n, i) => `${process.env.PUBLIC_URL}/datasets/${this.props.settings.sprite_dir}/tile_${i}.png`\n    )  \n    this.datasetIMG = this.tile_locations.map(src => {\n      let img = document.createElement('img')\n      img.src = src\n      return img\n    })\n  }\n\n  //changeEmbeddings(prev_choice, new_choice) {\n  changeEmbeddings(new_choice) {\n    let ranges = []\n    for (let i = 0; i < this.props.settings.sprite_number; i++) {\n      let start = i * this.sprite_size\n      let end = (i + 1) * this.sprite_size\n      if (i === this.props.settings.sprite_number - 1) end = this.props.settings.sprite_number * this.sprite_size\n      ranges.push([start, end])\n    }\n\n    let embedding_chunks = ranges.map(range =>\n      this.props.mappings[new_choice].slice(\n        range[0],\n        range[1]\n      )\n    )\n\n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\n      let echunk = embedding_chunks[c]\n\n      let points = this.scene.children[0].children[c]\n      let numVertices = echunk.length\n\n      let position = points.geometry.attributes.position.array\n      let target = new Float32Array(numVertices * 3)\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let x = echunk[i][0]\n        let y = echunk[i][1]\n        let z = 0\n        target[index] = x\n        target[index + 1] = y\n        target[index + 2] = z\n      }\n\n      let tween = new TWEEN.Tween(position)\n        .to(target, 1000)\n        .easing(TWEEN.Easing.Linear.None)\n      tween.onUpdate(function() {\n        points.geometry.attributes.position = new THREE.BufferAttribute(\n          position,\n          3\n        )\n        points.geometry.attributes.position.needsUpdate = true // required after the first render\n      })\n      tween.start();\n    }\n  }\n\n  zoomScaler(input) {\n    let scaleProj = d3\n    .scaleLinear()\n    .domain([20,0])\n    .range([this.props.scaleMin, this.props.scaleMax])\n    .clamp(true);\n    return scaleProj(input);\n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov);\n    let scale_height = this.props.height / scale;\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2));\n    return camera_z_position;\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov);\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position;\n    let fov_height = half_fov_height * 2;\n    let scale = this.props.height / fov_height;\n    return scale;\n  }\n\n  handleResize = (width, height) => {\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(width, height);\n    let current_scale = this.getScaleFromZ(this.camera.position.z);\n    let d3_x = -(this.camera.position.x * current_scale) + this.props.width / 2;\n    let d3_y = this.camera.position.y * current_scale + this.props.height / 2;\n    var resize_transform = d3.zoomIdentity\n      .translate(d3_x, d3_y)\n      .scale(current_scale);\n    let view = d3.select(this.mount);\n    this.d3_zoom.transform(view, resize_transform);\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform;\n    let scale = d3_transform.k;\n    let x = -(d3_transform.x - this.props.width / 2) / scale;\n    let y = (d3_transform.y - this.props.height / 2) / scale;\n    let z = this.getZFromScale(scale);\n    this.camera.position.set(x, y, z);\n    // point size scales at end of zoom\n    let new_size = this.zoomScaler(z);\n    let point_group = this.scene.children[0].children;\n    for (let c = 0; c < point_group.length; c++) {\n      point_group[c].material.uniforms.size.value = new_size;\n    }\n  }\n\n  setupCamera() {\n    let { width, height, embeddings_data } = this.props\n\n    let vFOV = this.camera.fov\n    let rvFOV = THREE.Math.degToRad(vFOV)\n\n    let xs = embeddings_data.map(e => e[0])\n    let min_x = _.min(xs)\n    let max_x = _.max(xs)\n    let ys = embeddings_data.map(e => e[1])\n    let min_y = _.min(ys)\n    let max_y = _.max(ys)\n\n    let max_x_from_center = _.max([min_x, max_x].map(m => Math.abs(m)))\n    let max_y_from_center = _.max([min_y, max_y].map(m => Math.abs(m)))\n\n    let max_center = Math.max(max_x_from_center, max_y_from_center)\n\n    let camera_z_start\n    // if (data_aspect > aspect) {\n    //   // console.log(\"width is limiter\");\n    //   // camera_z_start = max_x_from_center / Math.tan(rvFOV / 2) / aspect\n    // } else {\n    //   // console.log(\"height is limiter\");\n    //   // camera_z_start = max_y_from_center / Math.tan(rvFOV / 2)\n    // }\n\n    camera_z_start = max_center / Math.tan(rvFOV / 2)\n\n    let far = camera_z_start * 1.25\n    this.camera.far = far\n    this.camera.position.z = camera_z_start * 1.1\n\n    // set up zoom\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n    this.setState({ view: view })\n  }\n\n  addPoints() {\n    let { embeddings_data,metadata } = this.props;\n\n    // split embeddings and labels into chunks to match sprites\n    let ranges = [];\n    for (let i = 0; i < this.props.settings.sprite_number; i++) {\n      let start = i * this.sprite_size;\n      let end = (i + 1) * this.sprite_size;\n      if (i === this.props.settings.sprite_number - 1) end = this.props.settings.sprite_number * this.sprite_size;\n      ranges.push([start, end]);\n    }\n    let embedding_chunks = ranges.map(range =>\n      embeddings_data.slice(range[0], range[1])\n    );\n\n    // load the textures\n    let loader = new THREE.TextureLoader();\n    this.textures = this.tile_locations.map(l => {\n      let t = loader.load(l,\n        function ( w ) {\n          this.setState({ tilesLoaded: this.state.tilesLoaded+1 });\n        }.bind(this)\n      )\n      t.flipY = false\n      t.magFilter = THREE.NearestFilter\n      return t\n    })  \n    let geometry;\n    let point_group = new THREE.Group();\n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\n      let echunk = embedding_chunks[c];\n      //let lchunk = label_chunks[c]\n\n      let vertices = [];\n      for (let v = 0; v < echunk.length; v++) {\n        let embedding = echunk[v];\n        let vert = new THREE.Vector3(embedding[0], embedding[1], 0);\n        vertices[v] = vert;\n      }\n\n      geometry = new THREE.BufferGeometry();\n\n      let numVertices = vertices.length;\n      // console.log(\"numVertices -->\",numVertices)\n      let positionAr = new Float32Array(numVertices * 3);\n      let offsetAr = new Float32Array(numVertices * 2);\n      let clusterAr = new Float32Array(numVertices * 3);\n      let filterAr = new Float32Array(numVertices );\n      //let clustersActive = new Float32Array(numVertices );\n      geometry.addAttribute('position', new THREE.BufferAttribute(positionAr, 3));\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsetAr, 2));\n      geometry.addAttribute('filter', new THREE.BufferAttribute(filterAr, 1));\n      geometry.addAttribute('cluster', new THREE.BufferAttribute(clusterAr, 3));\n      //geometry.addAttribute('clusterActive', new THREE.BufferAttribute(clustersActive, 1));\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let x = echunk[i][0];\n        let y = echunk[i][1];\n        let z = 0;\n        positionAr[index] = x;\n        positionAr[index + 1] = y;\n        positionAr[index + 2] = z;\n      }\n      // geometry.attributes.position.copyVector3sArray(vertices)\n\n      let texture_subsize = 1 / this.props.settings.sprite_side;\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 2) {\n        let x = ((i % this.props.settings.sprite_side) * this.props.settings.sprite_image_size) / this.props.settings.sprite_actual_size\n        let y =\n          (Math.floor(i / this.props.settings.sprite_side) * this.props.settings.sprite_image_size) / this.props.settings.sprite_actual_size\n        offsetAr[index] = x;\n        offsetAr[index + 1] = y;\n      }\n      if (this.props.settings.clusters.clusterList) {\n        // Todo: connect cluster the array\n        let clusterSelected = this.props.clusterTypeSelected;\n        let clusterColors = this.props.settings.clusters.clusterColors;\n        // console.log(\"clusterSelected\",clusterSelected)\n        for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 1) {\n          // Images disable when are not visible\n          filterAr[index] = 0.0;// default value to show all images\n\n          // Clusters visualization\n\n          if( clusterSelected !== \"-\" && this.props.settings.clusters.clusterList.includes(clusterSelected) ){ \n              let clusterId = metadata[index][clusterSelected];\n              if(clusterId >= clusterColors.length){\n                clusterAr[index*3] = 1.0;\n                clusterAr[index*3 + 1] = 1.0;\n                clusterAr[index*3 + 2] = 1.0;\n              }else{\n                clusterAr[index*3] = clusterColors[clusterId][0];\n                clusterAr[index*3 + 1] = clusterColors[clusterId][1];\n                clusterAr[index*3 + 2] = clusterColors[clusterId][2];\n              }\n          }\n      }\n    }\n      // uniforms\n      let uniforms = {\n        texture: { value: this.textures[c] },\n        repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\n        size: { value: this.props.settings.sprite_image_size },\n        greyTransparency:{ value:0.1},\n        imageTransparency:{ value:1.0},\n        clusterActive:{ value:0.0}\n      };\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 cluster;\n        varying vec3 vCluster;\n        attribute float filteredActive;\n        varying float vFilteredActive;\n        uniform float clusterActive;\n        varying float vClusterActive;\n        uniform float size;\n        uniform float greyTransparency;\n        varying float vGreyTransparency;\n        uniform float imageTransparency;\n        varying float vImageTransparency;\n\n        void main() {\n          vOffset = offset;\n          vFilteredActive = filteredActive;\n          vCluster = cluster;\n          vClusterActive = clusterActive;\n          vGreyTransparency = greyTransparency;\n          vImageTransparency = imageTransparency;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`;\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vCluster;\n        varying float vClusterActive;\n        varying float vFilteredActive;\n        varying float vGreyTransparency;\n        varying float vImageTransparency;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          // make transparent images\n          if ( tex.a < 0.003 ) discard;\n\n          // Display clusters\n          vec4 replace_color = vec4(vCluster,1.0);\n          vec4 default_border_color = vec4(0.00392156863,0.00392156863,0.00392156863,0.0);\n          vec4 diff = tex - default_border_color;\n          float equality = float(dot(diff,diff) < 0.99 && vClusterActive > 0.9);\n          tex = mix( tex, replace_color, equality);\n           \n          // make transparent images\n          tex = mix( tex,  vec4(0.0,0.0,0.0,0.0), vImageTransparency);\n\n          // Grey images filter our selection \n          vec4 filterout_color = vec4(0.3,0.3,0.3,vGreyTransparency);\n          float filterout_equality = float(vFilteredActive > 0.9);\n          tex = mix( tex, filterout_color, filterout_equality );\n          gl_FragColor = tex; //* vec4(vColor, 1.0);\n        }`;\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n        transparent: true\n      });\n\n      // point cloud\n      let point_cloud = new THREE.Points(geometry, material);\n      point_cloud.userData = { sprite_index: c };\n      this.pointsAr.push(point_cloud);\n      // console.log(\"new points\")\n      point_group.add(point_cloud);\n    }\n    this.scene.add(point_group);\n  }\n\n  addBlankHighlightPoints() {\n    let hover_container = new THREE.Group();\n    this.scene.add(hover_container);\n\n    let vert = new THREE.Vector3(0, 0, 0);\n    let vertices = [vert];\n    let geometry = new THREE.BufferGeometry();\n    let numVertices = vertices.length;\n    var positionAr = new Float32Array(numVertices * 3); // 3 coordinates per point\n    var offsetAr = new Float32Array(numVertices * 2); // 2 coordinates per point\n    geometry.addAttribute('position', new THREE.BufferAttribute(positionAr, 3));\n    geometry.addAttribute('offset', new THREE.BufferAttribute(offsetAr, 2));\n\n    // all the attributes will be filled on hover\n    let texture_subsize = 1 / this.props.settings.sprite_side;\n\n    // uniforms\n    let uniforms = {\n      texture: { value: this.textures[0] },\n      repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\n      size: { value: 156.0 }, //56\n    };\n\n    let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`;\n\n    let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          gl_FragColor = tex;\n        }`;\n\n    // material\n    var material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertex_shader,\n      fragmentShader: fragment_shader,\n      transparent: true,\n    });\n\n    let point = new THREE.Points(geometry, material);\n    point.frustumCulled = false;\n\n    this.scene.children[1].visible = false;\n    this.scene.children[1].add(point);\n  }\n\n  // filter images - update color of images to get inactive (grey) or active images\n  updateProjection=(ar)=>{\n    this.filterAr = ar;\n    let ranges = [];\n    let ar_sliced = [];\n    for (let i = 0; i < this.props.settings.sprite_number; i++) {\n      let start = i * this.sprite_size;\n      let end = (i + 1) * this.sprite_size;\n      if (i === this.props.settings.sprite_number - 1) end = this.props.settings.sprite_number * this.sprite_size;\n      ranges.push([start, end]);\n      ar_sliced.push(ar.slice(start, end));\n    }\n    // \n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\n      let points = this.scene.children[0].children[c];\n      points.geometry.attributes.filteredActive = new THREE.BufferAttribute(\n        ar_sliced[c],\n        1\n      );\n      points.geometry.attributes.filteredActive.needsUpdate = true;\n    }\n    // let point = this.scene.children[0].children[0]\n    // console.log(point.geometry);\n  }\n\n  updatePass2Shader=(num)=>{\n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\n      let points = this.scene.children[0].children[c];\n      if(num===1){\n        points.material.uniforms.greyTransparency.value = 0.1;\n        points.material.uniforms.greyTransparency.needsUpdate = true;\n        points.material.uniforms.imageTransparency.value = 1.0;\n        points.material.uniforms.imageTransparency.needsUpdate = true;\n      }\n      if(num===2){\n        points.material.uniforms.greyTransparency.value = 0.0;\n        points.material.uniforms.greyTransparency.needsUpdate = true;\n        points.material.uniforms.imageTransparency.value = 0.0;\n        points.material.uniforms.imageTransparency.needsUpdate = true;\n      }\n    }\n  }\n\n  updateClusterColors=(clusterSelected)=>{\n    // console.log('updateClusterColors',clusterSelected);\n    \n    let numVertices =  this.props.metadata.length;//this.props.settings.sprite_number * this.sprite_size;\n    // console.log(\"clusterSelected:\",clusterSelected, \"numVertices Update -->\",numVertices, ' metadata.length:', this.props.metadata.length)\n    let clusters = new Float32Array(numVertices * 3);\n    //let clustersActive = new Float32Array(numVertices );\n    let clusterColors = this.props.settings.clusters.clusterColors;\n    // console.log(numVertices,clusterSelected !==\"-\",this.props.settings.total,clusterColors);\n    \n    let ranges = [];\n    // let clustersActiveAr_sliced = [];\n    let clustersAr_sliced = [];\n\n    if( clusterSelected !==\"disabled\" ){\n      let cluster_unique = [];\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 1) {\n          let clusterId = this.props.metadata[index][clusterSelected];\n          // check if clusterId is in cluster_unique\n          if(cluster_unique.indexOf(clusterId) === -1){\n            cluster_unique.push(clusterId);\n          }\n          // get the index of the clusterId in cluster_unique\n          let cluster_int = cluster_unique.indexOf(clusterId);\n          if(cluster_int>=clusterColors.length){\n            // make a random color\n            clusters[index*3] = Math.random();\n            clusters[index*3 + 1] = Math.random();\n            clusters[index*3 + 2] = Math.random();\n          }else{\n            clusters[index*3] = clusterColors[cluster_int][0];\n            clusters[index*3 + 1] = clusterColors[cluster_int][1];\n            clusters[index*3 + 2] = clusterColors[cluster_int][2];\n          }\n          \n      }\n\n      for (let i = 0; i < this.props.settings.sprite_number; i++) {\n        let start = i * this.sprite_size;\n        let end = (i + 1) * this.sprite_size;\n        if (i === this.props.settings.sprite_number - 1) end = this.props.settings.sprite_number * this.sprite_size;\n        ranges.push([start, end]);\n        clustersAr_sliced.push(clusters.slice(start*3, end*3));\n      }\n    }\n    \n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\n      let points = this.scene.children[0].children[c];\n      if( clusterSelected !==\"disabled\" ){\n        points.geometry.attributes.cluster = new THREE.BufferAttribute(\n          clustersAr_sliced[c],\n          3\n        );\n        points.geometry.attributes.cluster.needsUpdate = true;\n        \n        points.material.uniforms.clusterActive.value = 1.0;\n        points.material.uniforms.clusterActive.needsUpdate = true;\n      }else{\n        points.material.uniforms.clusterActive.value = 0.0;\n        points.material.uniforms.clusterActive.needsUpdate = true;\n      }\n    }\n\n\n  }\n\n  highlightPoint(sprite_index, digit_index, full_index) {    \n    let { algorithm_choice, mappings } = this.props;\n\n    let point = this.scene.children[1].children[0];\n\n    // console.log(mappings[algorithm_choice][full_index]);\n    let embedding = mappings[algorithm_choice][full_index];\n\n    let vert = new THREE.Vector3(embedding[0], embedding[1], 0);\n    let vertices = [vert];\n\n    var offsets = new Float32Array(2); // 2 coordinates per point\n\n    let x = ((digit_index % this.props.settings.sprite_side) * this.props.settings.sprite_image_size) / 2048;\n    let y = (Math.floor(digit_index / this.props.settings.sprite_side) * this.props.settings.sprite_image_size) / 2048;\n    offsets[0] = x;\n    offsets[1] = y;\n\n    point.geometry.attributes.position.copyVector3sArray(vertices);\n    point.geometry.attributes.position.needsUpdate = true; // required after the first render\n    point.geometry.attributes.offset.array = offsets;\n    point.geometry.attributes.offset.needsUpdate = true; // required after the first render\n\n    // need to set attributes on geometry and uniforms on material\n    point.material.uniforms.texture.value = this.textures[sprite_index];\n  }\n\n  removeHighlights() {\n    let highlight_container = this.scene.children[1];\n    let highlights = highlight_container.children;\n    highlight_container.remove(...highlights);\n  }\n\n  checkIntersects(mouse_position) {\n    let { width, height, previewPane_ctx, previewPane_image_size } = this.props;\n\n    function mouseToThree([mouseX, mouseY]) {\n      return new THREE.Vector3(\n        (mouseX / width) * 2 - 1,\n        -(mouseY / height) * 2 + 1,\n        1\n      );\n    }\n\n    function sortIntersectsByDistanceToRay(intersects) {\n      return _.sortBy(intersects, 'distanceToRay');\n    }\n\n    let mouse_vector = mouseToThree(mouse_position);\n    this.raycaster.setFromCamera(mouse_vector, this.camera);\n    this.raycaster.params.Points.threshold = 0.25;\n    let intersects = this.raycaster.intersectObjects(\n      this.scene.children[0].children\n    );\n    if (intersects[0]) {\n      let sorted_intersects = sortIntersectsByDistanceToRay(intersects);\n      let intersect = sorted_intersects[0];\n      let sprite_index = intersect.object.userData.sprite_index;\n      let digit_index = intersect.index;\n      let full_index = sprite_index * this.sprite_size + digit_index;\n      // if filter is null then allow selected all, then when filter is defined only allow visible image to be selected\n      if( this.filterAr===undefined || this.filterAr[full_index]<1.0){\n        this.props.setHoverIndex(full_index);\n        // console.log(full_index)\n        this.highlightPoint(sprite_index, digit_index, full_index);\n        this.scene.children[1].visible = true;\n        // previewPane_ctx.clearRect(0, 0,  previewPane_image_size, previewPane_image_size);\n        // previewPane_ctx.fillRect(0, 0, previewPane_image_size, previewPane_image_size);\n        // previewPane_ctx.fillStyle = \"transparent\";\n        // try{\n        //   previewPane_ctx.drawImage(\n        //     this.datasetIMG[sprite_index],\n        //     // source rectangle\n        //     (digit_index % this.props.settings.sprite_side) * this.props.settings.sprite_image_size,\n        //     Math.floor(digit_index / this.props.settings.sprite_side) * this.props.settings.sprite_image_size,\n        //     this.props.settings.sprite_image_size,\n        //     this.props.settings.sprite_image_size,\n        //     // destination rectangle\n        //     0,\n        //     0,\n        //     previewPane_image_size,\n        //     previewPane_image_size\n        //   );\n        // }catch (error){\n        //   console.log(\"previewPane_ctx.drawImage\",error);\n        // }\n      }\n    } else {\n      this.props.setHoverIndex(null);\n      this.scene.children[1].visible = false;\n      // previewPane_ctx.fillRect(0, 0, previewPane_image_size, previewPane_image_size);\n      // previewPane_ctx.fillStyle = \"transparent\";\n    }\n  }\n\n  handleMouse() {\n    let view = d3.select(this.renderer.domElement);\n    this.raycaster = new THREE.Raycaster();\n\n    view.on('mousemove', () => {\n      let [mouseX, mouseY] = d3.mouse(view.node());\n      let mouse_position = [mouseX, mouseY];\n      this.checkIntersects(mouse_position);\n    })\n    \n    view.on('dblclick', () => {\n      if(this.scene.children[1].visible) this.props.clickOnImage();\n    })\n  }\n\n  init() {\n    let { width, height } = this.props;\n    this.scene = new THREE.Scene();\n    let vFOV = 75;\n    let aspect = width / height;\n    let near = 0.01;\n    let far = 1000;\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far);\n\n    this.renderer = new THREE.WebGLRenderer({ preserveDrawingBuffer: true,alpha: true });\n    this.renderer.setClearColor(0xffffff, 0);\n    this.renderer.autoClear = false;\n    this.renderer.setSize(width, height);\n    this.renderer.domElement.id = \"threeCanvas\";\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.addPoints();\n    this.addBlankHighlightPoints();\n    this.setupCamera();\n    this.animate();\n    this.handleMouse();\n    this.changeEmbeddings(this.props.algorithm_choice);\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate);\n    TWEEN.update();\n    this.renderer.clear()\n    // 1-Pass :: Render filtered images (grey semi-transparent images that create a shadow behind)\n    if(parseInt(this.props.greyRenderTypeSelected)===0){\n      this.updatePass2Shader(1)\n      this.renderer.render(this.scene, this.camera);\n    }\n    // 2-Pass - Render all images\n    this.updatePass2Shader(2)\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentDidUpdate(prevProps) {\n    let { width, height } = this.props;\n    if (width !== prevProps.width || height !== prevProps.height) {\n      this.handleResize(width, height);\n    }\n    \n    if (prevProps.algorithm_choice !== this.props.algorithm_choice) {\n      this.changeEmbeddings(\n        //prevProps.algorithm_choice,\n        this.props.algorithm_choice,\n      );\n    }\n    \n    if (this.props.scaleMin !== prevProps.scaleMin || this.props.scaleMax !== prevProps.scaleMax){\n      this.handleResize(width, height);\n    }\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    let { width, height } = this.props;\n    const tileProgress = this.state.tilesLoaded;\n    const allTiles = this.props.settings.sprite_number;\n    return (\n      <><div>\n        {tileProgress < 1 ? <div className=\"loading\"><CircularProgress color=\"inherit\"/><div>loading tiles...</div></div> : \n        tileProgress < allTiles-1 ? <div className=\"loading-small\"><CircularProgress color=\"inherit\"/><div>loading...</div></div> : \n        ''\n      }\n      </div><div\n          style={{ width: width, height: height, overflow: 'hidden' }}\n          ref={mount => {\n            this.mount = mount\n          } } /></>\n    ) \n  }\n}\n\nexport default React.memo(Projection)\n\n\n","import React, { Component } from 'react'\nimport PreviewPane from './PreviewPane'\nimport SliderPane from './SliderPane'\nimport FilterPane from './FilterPane'\nimport InfoPane from './InfoPane'\nimport ViewPane from './ViewPane'\nimport MappingsPane from './MappingsPane'\nimport Export from './Export'\nimport { ProSidebar, Menu, MenuItem, SubMenu } from 'react-pro-sidebar';\nimport './scss/Menu.scss';\nimport Projection from './Projection'\nimport * as _ from 'lodash'\nimport { CircularProgress } from \"@material-ui/core\";\nimport { FaDatabase, FaSlidersH, FaSearch, FaCloudDownloadAlt, FaAngleDoubleLeft, FaAngleDoubleRight, FaRegImage, FaInfo, FaQuestion, FaEye } from \"react-icons/fa\";\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    let total = this.props.settings[\"total\"]\n    this.state = {\n      ww: null,\n      wh: null,\n      hover_index: 0,\n      previewPane_height: null,\n      controlPane_height: null,\n      filterPane_height: null,\n      algorithm_choice: null,\n      allFilter: {},\n      currentProjection: new Float32Array(total).fill(0),\n      currentFilter: new Float32Array(total).fill(0),\n      currentSearch: new Float32Array(total).fill(0),\n      scaleMin: 14,\n      scaleMax: 70,\n      filterGrey: true,\n      clusterTypeSelected:'-',\n      greyRenderTypeSelected:0,\n      dimensions: {},\n      collapsedControl: false,\n      collapsedObject: false\n    }\n    this.previewPane_ctx = null;\n    this.setSize = _.debounce(this.setSize.bind(this), 200);\n    this.setPreviewPaneCanvas = this.setPreviewPaneCanvas.bind(this);\n    this.setPreviewImage = this.setPreviewImage.bind(this);\n    this.selectAlgorithm = this.selectAlgorithm.bind(this);\n    this.selectDataset = this.selectDataset.bind(this);\n    this.toggleControl = this.toggleControl.bind(this);\n    this.refProjection = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setDefaults();\n    this.selectAlgorithm(this.props.algorithm_name);\n    this.setSize();\n    window.addEventListener('resize', this.setSize);\n  }\n\n  setDefaults(){\n    // if (this.props.settings[\"total\"] < 20000) {\n    //   this.setState( { scaleMin: 15, filterGrey: true, greyRenderTypeSelected: 0 } )\n    // } else {\n      this.setState( { scaleMin: 35, filterGrey: false, greyRenderTypeSelected: 1 } )\n    // }\n  }\n\n  setRenderer(renderer){\n    this.setState( { renderer: renderer});\n  }\n\n  handleChangeScale(e,val) {\n    this.setState({ scaleMin: val})\n  }\n\n  handleChangeZoom(e,val) {\n    this.setState({ scaleMax: val})\n  }\n\n  handleChangeCluster(e) {\n    let value = e.target.value;\n    this.setState({ clusterTypeSelected: parseInt(value)})\n    // console.log(e.target)\n    try{\n      this.refProjection.current.updateClusterColors(value)\n    } catch(error) {console.log(\"error updateClusterColors\")}\n  }\n\n  handleChangeGrey(value) {\n    this.setState({ greyRenderTypeSelected: value})\n  }\n\n  calculateProjection=(newArr,type, update)=>{\n    let A, B, arr;\n    if(type===\"filter\"){\n      this.setState({currentFilter: newArr})\n      A = newArr;\n      B = this.state.currentSearch;\n    }\n    if(type===\"search\"){\n      this.setState({currentSearch: newArr});\n      A = this.state.currentFilter;\n      B = newArr;\n    }\n    if(update){\n      arr = A.map((x, idx) => x + B[idx]);\n      this.setState({currentProjection: arr});\n    } else {\n      arr = newArr;\n    }\n    try{\n      this.refProjection.current.updateProjection(arr);\n    } catch(error) {}\n    }\n\n  selectAlgorithm(v) {\n    let i = this.props.algorithm_options.indexOf(v);\n    if(i<0) i = 0;\n    this.setState({ algorithm_choice: i });\n    // Save algorithm in URL parameters\n    this.props.addToUrl('projection',this.props.algorithm_options[i]);\n  }\n\n  selectDataset(p) {\n    this.props.changeDataset(p);\n  }\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight });\n    let previewPane_height = this.previewPane_mount.offsetHeight;\n    this.setState({ previewPane_height: previewPane_height });\n    if (this.previewPane_ctx) this.previewPane_ctx.imageSmoothingEnabled = false;\n    if ( window.innerWidth < 900) {\n      this.setState({ collapsedControl: true, collapsedObject: true })\n    } else {\n      this.setState({ collapsedControl: false, collapsedObject: false })\n\n    }\n  }\n\n  setPreviewPaneCanvas(canvas) {\n    let ctx = canvas.getContext('2d');\n    ctx.imageSmoothingEnabled = false;\n    this.previewPane_ctx = ctx;\n    // console.log(ctx);\n  }\n\n  setPreviewImage() {\n      return (\n      <img\n      src={ this.props.settings.url_prefix + this.props.metadata[this.state.hover_index].filename }\n      alt=\"preview\"\n      style={{\n        verticalAlign: \"middle\",\n      }}\n      />)\n  }\n\n\n  setHoverIndex(hover_index) {\n    if (hover_index != null){\n      this.setState({ hover_index: hover_index });\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize);\n  }\n\n  clickOnImage(){\n    // console.log(\"open image\",this.state.hover_index);\n    try{\n      let url = this.props.metadata[this.state.hover_index].link_URL\n      window.open(url, '_blank', 'noopener,noreferrer');\n    }catch(err){}\n  }\n\n  toggleControl = () => {\n    this.setState({ collapsedControl: !this.state.collapsedControl \n  })}\n  \n  toggleObject = () => {\n    this.setState({ collapsedObject: !this.state.collapsedObject \n  })}\n\n\n  render() {\n    let {\n      embeddings_data,\n      mappings,\n      algorithm_options,\n      dataset_options,\n      metadata,\n      settings,\n      barData\n    } = this.props;\n\n    let {\n      ww,\n      wh,\n      hover_index,\n      algorithm_choice,\n      currentProjection,\n      allFilter,\n      greyRenderTypeSelected,\n      clusterTypeSelected,\n      collapsedControl,\n      collapsedObject\n    } = this.state;\n\n    let previewPane_ctx = this.previewPane_ctx;\n    \n    let line_height = 1.5;\n\n    let previewPane_style = {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      // width: 320,\n      height: 'auto',\n      maxHeight: '100vh',\n      overflow: 'auto',\n      background: '#a4a4a4',\n      zIndex: 8\n    };\n    let controlMenu_style = {\n      position: 'absolute',\n      right: 0,\n      top: 0,\n      // width: 300,\n      // left:ww-350,\n      height: 'auto',\n      maxHeight: '100vh',\n      overflow: 'auto',\n      background: '#a4a4a4',\n      zIndex: 8\n    };\n\n    let main_style = {\n      position: 'relative',\n      background: '#a4a4a4',\n      overflow: 'hidden',\n      width: ww, \n      height: wh\n    };\n\n    let previewPane_image_size = '320px';\n    let font_size = 16;\n\n    let grem = font_size * line_height;\n\n    let general_style = {\n      fontSize: font_size,\n      lineHeight: line_height,\n    };\n\n    let displayNumb = 0;\n    for(let i=0;i<settings.total;i++){\n      if(currentProjection[i]===0){\n        displayNumb++;\n      }\n    }\n\n\n    return ww !== null ? (\n      <div style={general_style}>\n        <div\n          style={controlMenu_style}\n          ref={controlMenu_mount => {\n            this.controlMenu_mount = controlMenu_mount\n          }}\n        >\n          <div>\n          <ProSidebar collapsed={collapsedControl}>\n            <Menu>\n\n\n              \n            <MenuItem>\n            <MappingsPane\n                grem={grem}\n                algorithm_options={algorithm_options}\n                algorithm_choice={algorithm_choice}\n                selectAlgorithm={this.selectAlgorithm}\n                dataset_options={dataset_options}\n                selectDataset={this.selectDataset}\n                selectedDataset={this.props.selectedDataset}\n                participantId={this.props.participantId}\n                datasetInfo={settings[\"datasetInfo\"]}\n              />            \n              </MenuItem>\n\n              {/* <SubMenu defaultOpen\n              // title={collapsedControl ? null : \"Data & Projections\"}  \n              // icon={collapsedControl ? < FaDatabase />  : null }\n              >\n              <MenuItem>\n\n              </MenuItem>\n              </SubMenu> */}\n              {/* <SubMenu defaultOpen\n              title={collapsedControl ? null : \"Dimension Filters\"}  \n              icon={collapsedControl ? <FaSlidersH />  : null }\n              >\n\n\n                <MenuItem>\n                <SliderPane\n                grem={grem}\n                metadata={metadata}\n                hover_index={hover_index}\n                settings={settings}\n                barData={barData}\n                calculateProjection={this.calculateProjection}\n                currentProjection={currentProjection}\n                allFilter={allFilter}\n                />\n                </MenuItem>\n                </SubMenu> */}\n\n                {/* <SubMenu\n                title={collapsedControl ? null : \"Advanced Filters\"}  \n                icon={collapsedControl ? < FaSearch />  : null }\n                >\n\n                <MenuItem>\n                  <FilterPane\n                    grem={grem}\n                    calculateProjection={this.calculateProjection}\n                    hover_index={hover_index}\n                    settings={settings}\n                    metadata={metadata}\n                    currentProjection={currentProjection}\n                    allFilter={allFilter}\n                  />\n                </MenuItem>\n              </SubMenu> */}\n              {/* <SubMenu\n                title={collapsedControl ? null : \"Export Filtered Data\"}  \n                icon={collapsedControl ? <FaCloudDownloadAlt />  : null }\n                >\n\n              <MenuItem>\n                <Export\n                metadata = {metadata}\n                currentProjection = {currentProjection}\n                />\n              </MenuItem>\n            </SubMenu> */}\n            </Menu>\n          </ProSidebar>\n          </div>\n        </div>    \n\n        <div\n          style={previewPane_style}\n          ref={previewPane_mount => {\n            this.previewPane_mount = previewPane_mount\n          }}\n        >\n\n        {/* <div>\n          <ProSidebar collapsed={collapsedObject}>\n            <Menu iconShape='square'>   \n            <MenuItem>\n            {collapsedObject ? <h3></h3> : <h3>Collection Space Navigator</h3> }\n            <a className='collapseObj' onClick={this.toggleObject}>{collapsedObject ? < FaAngleDoubleRight />  : < FaAngleDoubleLeft /> }</a>\n            </MenuItem>\n              <SubMenu defaultOpen\n                title={collapsedObject ? null : \"Object Preview\"}  \n                icon={collapsedObject ? <FaRegImage />  : null }\n                >  \n                <PreviewPane\n                  previewPane_image_size={previewPane_image_size}\n                  setPreviewPaneCanvas={this.setPreviewPaneCanvas}\n                  setPreviewImage={this.setPreviewImage}\n                  hover_index={hover_index}\n                />\n              </SubMenu>\n              <SubMenu defaultOpen\n                title={collapsedObject ? null : \"Object Info\"}  \n                icon={collapsedObject ? <FaInfo />  : null }\n                >  \n                <MenuItem>\n                <InfoPane\n                  hover_index={hover_index}\n                  metadata={metadata}\n                  infos={settings.info}\n                />\n                </MenuItem>\n              </SubMenu>\n\n              <SubMenu\n                title={collapsedObject ? null : \"Object Appearance\"}  \n                icon={collapsedObject ? <FaEye />  : null }\n                > \n                <MenuItem>\n                <ViewPane\n                  clusters={settings.clusters}\n                  scaleMin={this.state.scaleMin}\n                  scaleMax={this.state.scaleMax}\n                  filterGrey={this.state.filterGrey}\n                  handleChangeScale = {this.handleChangeScale.bind(this)}\n                  handleChangeZoom = {this.handleChangeZoom.bind(this)}\n                  handleChangeCluster = {this.handleChangeCluster.bind(this)}\n                  handleChangeGrey = {this.handleChangeGrey.bind(this)}\n                  total = {settings.total}\n                />\n                </MenuItem>\n                <MenuItem>\n                <div className='info'>showing {displayNumb} / {settings.total}</div>\n              </MenuItem>\n              </SubMenu>\n\n            <SubMenu\n              title={collapsedObject ? null : 'About'}  \n              icon={collapsedObject ? <FaQuestion />  : null }\n              >         \n              <div className='about'>\n                The Collection Space Navigator (CSN) is an <strong>interactive visualization interface for multidimensional datasets</strong>.\n                It functions as an explorative visualization tool for researching collections and their multidimensional representations. \n                We designed this tool to better understand multidimensional data, its methods, and semantic qualities through spatial navigation and filtering. \n                CSN can be used with any image collection and can be customized for specific research needs. <a href=\"https://github.com/Collection-Space-Navigator/CSN\" target=\"_blank\" rel=\"noreferrer\" ><strong>[more on GitHub...]</strong></a>\n              </div>\n              </SubMenu>\n            </Menu>\n          </ProSidebar>\n          </div> */}\n        </div>\n        <div style={main_style}>\n          <Projection\n            ref={this.refProjection}\n            width={main_style.width}\n            height={main_style.height}\n            embeddings_data={embeddings_data}\n            mappings={mappings}\n            metadata={metadata}\n            // previewPane_ctx={previewPane_ctx}\n            // previewPane_image_size={previewPane_image_size}\n            setHoverIndex={this.setHoverIndex.bind(this)}\n            algorithm_choice={algorithm_choice}\n            datasetDir={this.props.datasetDir}\n            clusterTypeSelected={clusterTypeSelected}\n            greyRenderTypeSelected={greyRenderTypeSelected}\n            settings={settings}\n            initPath={this.props.initPath}\n            scaleMin={this.state.scaleMin}\n            scaleMax={this.state.scaleMax}\n            currentProjection={currentProjection}\n            clickOnImage={this.clickOnImage.bind(this)}\n            // tiles={this.tiles}\n          />\n        </div>\n      </div>\n      \n    ) : (\n      <div className=\"loading\"><CircularProgress color=\"inherit\"/><div>loading layout...</div></div>\n    )\n  }\n}\n\nexport default Layout\n\n\n\n","import React, { Component } from 'react'\nimport {useParams, useNavigate} from \"react-router-dom\";\nimport Layout from './Layout'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport color from 'color'\n// import * as THREE from 'three'\nimport { CircularProgress } from \"@material-ui/core\";\n\n\nfunction withRouter(Component) {\n  return props => <Component {...props} params={useParams()} navigate={useNavigate()} />;\n}\n\nclass Data extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // tilesLoaded: 0,\n      algorithm_options: null,\n      dataset_options: null,\n      dataset_dirs: null,\n      embeddings_data: null,\n      mappings: null,\n      metadata:null,\n      defaultDataset:null,\n      algorithm_name:0\n    };\n  }\n\n  scaleEmbeddings(embeddings) {\n    let xs = embeddings.map(e => Math.abs(e[0]));\n    let ys = embeddings.map(e => Math.abs(e[1]));\n    let max_x = _.max(xs);\n    let max_y = _.max(ys);\n    let max = Math.max(max_x, max_y);\n    let scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([-20, 20]);\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])]);\n    return scaled_embeddings;\n  }\n  \n  componentDidMount() {\n    // Get parameters from URL and save to settings\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    this.setState({ selectedDataset: urlParams.get('dataset')});\n    this.setState({ participantId: urlParams.get('id')});\n    if(urlParams.get('projection')!==undefined) this.setState({algorithm_name:urlParams.get('projection')});\n    // Load embeddings\n    this.loadInit('datasets/datasets_config.json')\n  }\n\n  loadConfig(path){\n    this.loadSettings(`datasets/${path}/config.json`);\n    this.loadBarData(`datasets/${path}/barData.json`);\n    this.loadMetadata(`datasets/${path}/metadata.json`);\n  }\n  \n  prepareMappings(ID){\n    let algorithm_options = [];\n    for (let i in this.state.settings.embeddings) {\n      // console.log(this.state.settings.embeddings[i].name);\n      algorithm_options[i] = this.state.settings.embeddings[i].name;\n    }\n    this.setState({ algorithm_options: algorithm_options });\n  }\n\n  loadDataset(ID){\n    let mappings = [];\n    const embeddings = this.state.settings.embeddings;\n    for (let i in embeddings) {\n      console.log(\"load:\",this.state.datasetDir);\n      fetch(`${process.env.PUBLIC_URL}/datasets/${this.state.datasetDir}/${embeddings[i].file}`)\n        .then(response => response.json())\n        .then(embeddings_data => {\n          let scaled_embeddings = embeddings_data;\n          // this.scaleEmbeddings(embeddings_data);\n          mappings[i] = scaled_embeddings;\n        }\n        )\n        .then(() => {\n          this.setState({ mappings: mappings, embeddings_data: mappings[0] })\n        })\n  }\n}\n\n  // loadTiles(){ \n  //   const tile_locations = [...Array(this.state.settings.sprite_number)].map(\n  //     (n, i) => `${process.env.PUBLIC_URL}/datasets/${this.state.datasetDir}/tile_${i}.png`\n  //   )\n  //   let loader = new THREE.TextureLoader();\n  //   this.tiles = tile_locations.map(l => {\n  //     let t = loader.load(l,\n  //       function ( texture ) {\n  //         this.setState({ tilesLoaded: this.state.tilesLoaded+1 });\n  //       }.bind(this)\n  //     )\n  //     t.flipY = false\n  //     t.magFilter = THREE.NearestFilter\n  //     return t\n  //   })    \n  // }\n\n\n  addToUrl(paramName,value){\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    urlParams.set(paramName, value);\n    this.props.navigate(\"?\"+urlParams.toString());\n  }\n\n  prepareDatasets(ID){\n    let dataset_options = [];\n    let dataset_dirs = [];\n    for (let i in this.state.settings.embeddings) {\n      // console.log(this.state.settings.embeddings[i].name);\n      dataset_options[i] = this.state.settings.embeddings[i].name;\n      dataset_dirs[i] = this.state.settings.embeddings[i].directory;\n    }\n    this.setState({ dataset_options: dataset_options, dataset_dirs: dataset_dirs });\n  }\n\n  changeDataset(choice){\n    this.addToUrl('dataset',choice);\n    let k = this.state.dataset_options.indexOf(choice);\n    let newDataset = this.state.dataset_dirs[k]\n    this.setState({ \n      selectedDataset: choice, \n      datasetDir: newDataset,\n      algorithm_options: null,\n      embeddings_data: null,\n      mappings: null,\n      metadata: null\n    });\n    this.loadConfig(newDataset);\n  }\n\n  loadInit(file){\n    fetch(`${process.env.PUBLIC_URL}/`+file)\n      .then(response => response.json())\n      .then(init =>{\n        let dataset_options = [];\n        let dataset_dirs = [];\n        for (let i in init.data) {\n          // console.log(init.data[i].directory);\n          dataset_options[i] = init.data[i].name;\n          dataset_dirs[i] = init.data[i].directory;\n        }\n        this.setState({ dataset_options: dataset_options,dataset_dirs: dataset_dirs});\n        // Select dataset folder from defined in URL parameters\n        if(this.state.selectedDataset===null){\n          this.setState({ selectedDataset: init.data[init.default].name,  datasetDir: init.data[init.default].directory});\n          this.addToUrl('dataset',init.data[init.default].name);\n        }else{\n          let foundInitDataset = false;\n          for (let i in init.data) {\n            if(init.data[i].name===this.state.selectedDataset){\n              this.setState({datasetDir: init.data[i].directory});\n              foundInitDataset = true;\n            } \n          }\n          if(!foundInitDataset) this.setState({ selectedDataset: init.data[init.default].name,  datasetDir: init.data[init.default].directory});\n        }\n      }\n      )\n      .then(()=> \n      this.loadConfig(this.state.datasetDir))\n\n  }\n\n  loadSettings(file){\n    fetch(`${process.env.PUBLIC_URL}/`+file)\n      .then(response => response.json())\n      .then(settings =>{\n        // Convert colors from rgb(255,0,0) to array [1.0,0.0,0.0]\n        try{\n          const floatColorConvertedArr = settings.clusters.clusterColors.map(myColorFunction);\n          function myColorFunction(value) {\n            return [color(value).rgb().array()[0]/255,color(value).rgb().array()[1]/255,color(value).rgb().array()[2]/255];\n          }\n          settings.clusters.clusterColors = floatColorConvertedArr;\n        }catch(error){}\n        // Save settings to \n        this.setState({\n          settings: settings\n        });\n      }\n      )\n      .then(() =>\n      this.prepareMappings(0))\n      .then(()=> \n      this.loadDataset(0))\n      // .then(()=> \n      // this.loadTiles())\n  }\n\n  loadMetadata(file){\n    fetch(`${process.env.PUBLIC_URL}/`+file)\n      .then(response => response.json())\n      .then(metadata =>\n        this.setState({\n          metadata: metadata,\n        })\n      )\n  }\n\n  loadBarData(file){\n    fetch(`${process.env.PUBLIC_URL}/`+file)\n      .then(response => response.json())\n      .then(barData =>\n        this.setState({\n          barData: barData,\n        })\n      )\n  }\n\n\n  render() {\n    return this.state.embeddings_data && this.state.metadata ? (\n\n      <Layout\n        {...this.state}\n        addToUrl={this.addToUrl.bind(this)}\n        algorithm_name={this.state.algorithm_name}\n        algorithm_options={this.state.algorithm_options}\n        dataset_options={this.state.dataset_options}\n        dataset_dirs={this.state.dataset_dirs}\n        changeDataset={this.changeDataset.bind(this)}\n        selectedDataset={this.state.selectedDataset}\n        participantId={this.state.participantId}\n        datasetDir={this.state.datasetDir}\n        // tiles={this.tiles}\n      />\n\n    ) : (\n      <div className=\"loading\" ><CircularProgress color=\"inherit\"/><div>loading datasets... </div></div>\n      \n    )\n  }\n}\n\nexport default withRouter(Data)\n\n","import React from \"react\";\nimport {\n  BrowserRouter, Routes, Route\n} from \"react-router-dom\";\n\n// Area components\nimport './App.css'\nimport WithRouter from './Data'\n\nexport default function App() {\n  \n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route exact path=\"/\" element={<WithRouter/>} />\n        <Route exact path=\"/CSN\" element={<WithRouter/>}/> \n      </Routes>\n    </BrowserRouter>\n  );\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}